---
- name: Wildcard TLS - Create/renew certificates
  hosts: tls_bastion

  pre_tasks:
    - name: Check if repo-specific secrets file exists
      delegate_to: localhost
      connection: local
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/vars/secrets.yml"
      register: repo_secrets_file

    - name: If repo-specific secrets file exists, load it in
      delegate_to: localhost
      connection: local
      ansible.builtin.include_vars:
        file: "vars/secrets.yml"
      when: repo_secrets_file.stat.exists

    - name: Set PATH environment variable
      ansible.builtin.set_fact:
        ansible_env:
          PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

  tasks:
    - name: Bail if the user hasn't explicitly accepted the Let's Encrypt Terms of Service.
      ansible.builtin.fail:
        msg: Please change LE_ACCEPT_TOS to true after reading the Let's Encrypt ToS.
      when: not LE_ACCEPT_TOS

    - name: Grab info about the user we're connected as
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        state: present
      register: ansible_user_info
      become: true

    - name: Fetch the latest version of lego
      ansible.builtin.get_url:
        url: https://github.com/go-acme/lego/releases/download/v4.10.2/lego_v4.10.2_linux_amd64.tar.gz
        dest: /tmp/lego.tar.gz
        mode: '0755'

    - name: Unpack the lego binary
      ansible.builtin.unarchive:
        src: /tmp/lego.tar.gz
        dest: "{{ ansible_user_info.home }}/bin/"
        remote_src: true
        mode: '0755'

    - name: Request a certificate
      ansible.builtin.command:
        cmd: "lego --key-type rsa4096 --accept-tos --dns cloudflare --domains *.{{ dns_domain }} --email {{ cloudflare_email }} run"
        creates: "{{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.crt"
      environment:
        CF_DNS_API_TOKEN: "{{ cf_dns_api_token }}"
        CF_ZONE_API_TOKEN: "{{ cf_zone_api_token }}"
      register: request_cert

    - name: Print the results of the certificate request
      ansible.builtin.debug:
        msg: "Requested a certificate. Output was {{ request_cert.stdout_lines }} {{ request_cert.stderr_lines }}"
      when: request_cert.changed

    - name: Renew our certificate if it's close to expiring
      ansible.builtin.command:
        cmd: "lego --key-type rsa4096 --dns cloudflare --domains *.{{ dns_domain }} --email {{ cloudflare_email }} renew --days 45"
      environment:
        CF_DNS_API_TOKEN: "{{ cf_dns_api_token }}"
        CF_ZONE_API_TOKEN: "{{ cf_zone_api_token }}"
      when: not request_cert.changed
      register: renew_cert

    - name: Print the results of the renewal request
      debug:
        msg: "Requested renewal. Output was {{ renew_cert.stdout_lines }} {{ renew_cert.stderr_lines }}"
      when: renew_cert.changed

    - name: Create a PFX-formatted certificate
      ansible.builtin.command: "openssl pkcs12 -inkey {{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.key -in {{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.crt -export -out {{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.pfx -password \"pass:{{ pfx_password }}\""
      # when: request_cert.changed or renew_cert.stdout | length > 0
      # TODO: make this when conditional also detect {{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.pfx not existing

- name: Wildcard TLS - Retrieve keys and certificates
  hosts: tls_bastion

  tasks:
    - name: Grab info about the user we're connected as (#2)
      user:
        name: "{{ ansible_user_id }}"
        state: present
      register: ansible_user_info
      become: true

    - name: Create temporary private key file
      ansible.builtin.copy:
        content: "{{ private_key_material_key }}"
        dest: "/tmp/private_material_key"
        mode: "0600"
      register: temp_key_file
      delegate_to: localhost
      connection: local

    - name: Ensure ~/.ssh exists
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/.ssh"
        state: directory
        mode: '0700'
      delegate_to: localhost
      connection: local

    - name: Add GitHub's host keys to known_hosts # noqa line-length - TODO(cleanup): Move this to public group_vars/all
      ansible.builtin.known_hosts:
        name: github.com
        key: "github.com {{ item }}"
        state: present
      loop:
        - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl"
        - "ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg="
        - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk="
      delegate_to: localhost
      connection: local

    - name: Use Git to locally checkout our wildcard-tls-materials repository.
      ansible.builtin.git:
        accept_hostkey: true
        repo: "{{ private_key_material_repo }}"
        dest: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials"
        key_file: "/tmp/private_material_key"
      delegate_to: localhost
      connection: local

    - name: Set Git name and email address
      ansible.builtin.command:
        cmd: "{{ item }}"
        chdir: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials"
      loop:
        - git config user.name "{{ tls_materials_git_username }}"
        - git config user.email "{{ tls_materials_git_email }}"
      delegate_to: localhost
      connection: local

    - name: Create a main directory to hold our certificates
      file:
        path: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}"
        state: directory
      delegate_to: localhost
      connection: local

    - name: Create a directory to hold our certificates (generic)
      file:
        path: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic"
        state: directory
      delegate_to: localhost
      connection: local

    - name: Copy the wildcard certificate to a temporary location
      fetch:
        src: "{{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.crt"
        dest: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/"
        flat: true

    - name: Copy the wildcard certificate chain to a temporary location
      fetch:
        src: "{{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.issuer.crt"
        dest: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/"
        flat: true

    - name: Copy the wildcard key to a temporary location
      fetch:
        src: "{{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.key"
        dest: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/"
        flat: true

    - name: Build a haproxy-compatible pem file
      ansible.builtin.shell:
        cmd: "cat {{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/_.{{ dns_domain }}.crt {{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/_.{{ dns_domain }}.key > {{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/_.{{ dns_domain }}-combined.pem"
      no_log: true
      delegate_to: localhost
      connection: local

    - name: Print the path we have on our shell right now
      ansible.builtin.shell:
        cmd: "echo $PATH"
        executable: /bin/bash
      register: path
      delegate_to: localhost
      connection: local

    - name: Output the path
      ansible.builtin.debug:
        msg: "The path is {{ path.stdout_lines }}"

    - name: Create temporary Ansible Vault encryption keys
      ansible.builtin.copy:
        content: "{{ vault_secret_tls_materials }}"
        dest: "/tmp/vault-tls-materials"
        mode: "0600"
      register: temp_key_file
      delegate_to: localhost
      connection: local

    - name: Encrypt the haproxy pem file
      ansible.builtin.shell:
        cmd: "ansible-vault encrypt --vault-id tls-materials@/tmp/vault-tls-materials {{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/_.{{ dns_domain }}-combined.pem"
        executable: /bin/bash
      delegate_to: localhost
      connection: local

    - name: Encrypt the wildcard key
      ansible.builtin.shell:
        cmd: "ansible-vault encrypt --vault-id tls-materials@/tmp/vault-tls-materials {{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/_.{{ dns_domain }}.key"
        executable: /bin/bash
      delegate_to: localhost
      connection: local

    - name: Copy the wildcard PFX bundle to a temporary location
      fetch:
        src: "{{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.pfx"
        dest: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/"
        flat: true

    - name: Encrypt the wildcard PFX bundle
      ansible.builtin.shell:
        cmd: "ansible-vault encrypt --vault-id tls-materials@/tmp/vault-tls-materials {{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/_.{{ dns_domain }}.pfx"
        executable: /bin/bash
      delegate_to: localhost
      connection: local

    - name: Add the new keys to Git
      ansible.builtin.command:
        cmd: "git add ."
        chdir: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials"
      delegate_to: localhost
      connection: local

    - name: Create a new Git commit with the new materials
      ansible.builtin.command:
        cmd: "git commit -m'Updated keys from {{ lookup('pipe', 'date +%Y-%m')}} via Ansible'"
        chdir: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials"
      delegate_to: localhost
      connection: local

    - name: Push the Git repository
      ansible.builtin.shell:
        cmd: 'GIT_SSH_COMMAND="ssh -i /tmp/private_material_key -o IdentitiesOnly=yes" git push'
        chdir: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials"
      delegate_to: localhost
      connection: local

    - name: Remove temporary private key file
      ansible.builtin.file:
        path: "{{ temp_key_file.dest }}"
        state: absent
      delegate_to: localhost
      connection: local

    - name: Remove temporary vault key file
      ansible.builtin.file:
        path: "/tmp/vault-tls-materials"
        state: absent
      delegate_to: localhost
      connection: local

- name: Wildcard TLS - Distribute keys
  hosts: tls_hosts
  become: true

  tasks:
    - name: Create the Wildcard TLS directory to hold our certificates
      file:
        path: "/etc/wildcard-tls/"
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Copy the certificates
      copy:
        src: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/"
        dest: "/etc/wildcard-tls/{{ lookup('pipe', 'date +%Y-%m')}}"
        owner: root
        group: root
        mode: '0400'

    - name: Create a "latest" symlink for ease of use
      file:
        src: "/etc/wildcard-tls/{{ lookup('pipe', 'date +%Y-%m')}}"
        dest: "/etc/wildcard-tls/latest"
        owner: root
        group: root
        state: link
