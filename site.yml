---
- name: Wildcard TLS - Create/renew certificates
  hosts: tls_bastion

  vars_files:
    - vars/dns-secrets.yaml

  pre_tasks:
    - name: Set PATH environment variable
      ansible.builtin.set_fact:
        ansible_env:
          PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

  tasks:
    - name: Bail if the user hasn't explicitly accepted the Let's Encrypt Terms of Service.
      ansible.builtin.fail:
        msg: Please change LE_ACCEPT_TOS to true after reading the Let's Encrypt ToS.
      when: not LE_ACCEPT_TOS

    - name: Grab info about the user we're connected as
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        state: present
      register: ansible_user_info
      become: true

    - name: Fetch the latest version of lego
      ansible.builtin.get_url:
        url: https://github.com/go-acme/lego/releases/download/v4.10.2/lego_v4.10.2_linux_amd64.tar.gz
        dest: /tmp/lego.tar.gz
        mode: '0755'

    - name: Unpack the lego binary
      ansible.builtin.unarchive:
        src: /tmp/lego.tar.gz
        dest: "{{ ansible_user_info.home }}/bin/"
        remote_src: true
        mode: '0755'

    - name: Request a certificate
      ansible.builtin.command:
        cmd: "lego --key-type rsa4096 --accept-tos --dns cloudflare --domains *.{{ dns_domain }} --email {{ cloudflare_email }} run"
        creates: "{{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.crt"
      environment:
        CF_DNS_API_TOKEN: "{{ CF_DNS_API_TOKEN }}"
        CF_ZONE_API_TOKEN: "{{ CF_ZONE_API_TOKEN }}"
      register: request_cert

    - name: Print the results of the certificate request
      ansible.builtin.debug:
        msg: "Requested a certificate. Output was {{ request_cert.stdout_lines }} {{ request_cert.stderr_lines }}"
      when: request_cert.changed

    - name: Renew our certificate if it's close to expiring
      ansible.builtin.command:
        cmd: "lego --key-type rsa4096 --dns cloudflare --domains *.{{ dns_domain }} --email {{ cloudflare_email }} renew --days 45"
      environment:
        CF_DNS_API_TOKEN: "{{ CF_DNS_API_TOKEN }}"
        CF_ZONE_API_TOKEN: "{{ CF_ZONE_API_TOKEN }}"
      when: not request_cert.changed
      register: renew_cert

    - name: Print the results of the renewal request
      debug:
        msg: "Requested renewal. Output was {{ renew_cert.stdout_lines }} {{ renew_cert.stderr_lines }}"
      when: renew_cert.changed

    - name: Create a PFX-formatted certificate
      ansible.builtin.command: "openssl pkcs12 -inkey {{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.key -in {{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.crt -export -out {{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.pfx -password \"pass:{{ pfx_password }}\""
      # when: request_cert.changed or renew_cert.stdout | length > 0
      # TODO: make this when conditional also detect {{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.pfx not existing

- name: Wildcard TLS - Retrieve keys and certificates
  hosts: tls_bastion

  vars_files:
    - vars/dns-secrets.yaml

  tasks:
    - name: Grab info about the user we're connected as (#2)
      user:
        name: "{{ ansible_user_id }}"
        state: present
      register: ansible_user_info
      become: true

    - name: Use Git to locally checkout our wildcard-tls-materials repository.
      ansible.builtin.git:
        repo: "{{ private_key_material_repo }}"
        dest: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials"
      delegate_to: localhost

    - name: Create a main directory to hold our certificates
      file:
        path: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}"
        state: directory
      delegate_to: localhost

    - name: Create a directory to hold our certificates (generic)
      file:
        path: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic"
        state: directory
      delegate_to: localhost

    - name: Copy the wildcard certificate to a temporary location
      fetch:
        src: "{{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.crt"
        dest: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/"
        flat: true

    - name: Copy the wildcard certificate chain to a temporary location
      fetch:
        src: "{{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.issuer.crt"
        dest: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/"
        flat: true

    - name: Copy the wildcard key to a temporary location
      fetch:
        src: "{{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.key"
        dest: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/"
        flat: true

    - name: Build a haproxy-compatible pem file
      ansible.builtin.shell:
        cmd: "cat {{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/_.{{ dns_domain }}.crt {{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/_.{{ dns_domain }}.key > {{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/_.{{ dns_domain }}-combined.pem"
      no_log: true
      delegate_to: localhost

    - name: Encrypt the haproxy pem file
      ansible.builtin.shell:
        cmd: "ansible-vault encrypt --vault-id tls-materials@{{ playbook_dir }}/vars/vault-secret {{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/_.{{ dns_domain }}-combined.pem"
      delegate_to: localhost

    - name: Encrypt the wildcard key
      ansible.builtin.shell:
        cmd: "ansible-vault encrypt --vault-id tls-materials@{{ playbook_dir }}/vars/vault-secret {{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/_.{{ dns_domain }}.key"
      delegate_to: localhost

    - name: Copy the wildcard PFX bundle to a temporary location
      fetch:
        src: "{{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.pfx"
        dest: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/"
        flat: true

    - name: Encrypt the wildcard PFX bundle
      ansible.builtin.shell:
        cmd: "ansible-vault encrypt --vault-id tls-materials@{{ playbook_dir }}/vars/vault-secret {{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/generic/_.{{ dns_domain }}.pfx"
      delegate_to: localhost

    - name: Add the new keys to Git
      ansible.builtin.command:
        cmd: "git add ."
        chdir: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials"
      delegate_to: localhost

    - name: Create a new Git commit with the new materials
      ansible.builtin.command:
        cmd: "git commit -m'Updated keys from {{ lookup('pipe', 'date +%Y-%m')}} via Ansible'"
        chdir: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials"
      delegate_to: localhost

    - name: Push the Git repository
      ansible.builtin.command:
        cmd: "git push"
        chdir: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials"
      delegate_to: localhost

- name: Wildcard TLS - Distribute keys
  hosts: tls_hosts
  become: true

  vars_files:
    - vars/dns-secrets.yaml

  tasks:
    - name: Create the Wildcard TLS directory to hold our certificates
      file:
        path: "/etc/wildcard-tls/"
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Copy the certificates
      copy:
        src: "{{ lookup('env', 'HOME') }}/wildcard-tls-materials/{{ lookup('pipe', 'date +%Y-%m')}}/"
        dest: "/etc/wildcard-tls/{{ lookup('pipe', 'date +%Y-%m')}}"
        owner: root
        group: root
        mode: '0400'

    - name: Create a "latest" symlink for ease of use
      file:
        src: "/etc/wildcard-tls/{{ lookup('pipe', 'date +%Y-%m')}}"
        dest: "/etc/wildcard-tls/latest"
        owner: root
        group: root
        state: link
