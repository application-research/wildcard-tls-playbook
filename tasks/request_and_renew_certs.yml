---
- name: Set PATH environment variable
  ansible.builtin.set_fact:
    ansible_env:
      PATH: "{{ ansible_user_info.home }}/bin:/usr/local/bin"

- name: Request a certificate
  ansible.builtin.command:
    cmd: "{{ ansible_user_info.home }}/bin/lego --key-type rsa4096 --accept-tos --dns cloudflare --dns.resolvers 1.1.1.1 --domains *.{{ dns_domain }} --email {{ cloudflare_email }} run"
    creates: "{{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.crt"
  environment:
    CF_DNS_API_TOKEN: "{{ CF_DNS_API_TOKEN }}"
    CF_ZONE_API_TOKEN: "{{ CF_ZONE_API_TOKEN }}"
  register: request_cert

- name: Print the results of the certificate request
  ansible.builtin.debug:
    msg: "Requested a certificate. Output was {{ request_cert.stdout_lines }} {{ request_cert.stderr_lines }}"
  when: request_cert.changed

- name: Renew our certificate if it's close to expiring
  ansible.builtin.command:
    cmd: "{{ ansible_user_info.home }}/bin/lego --key-type rsa4096 --dns cloudflare --domains *.{{ dns_domain }} --dns.resolvers 1.1.1.1 --email {{ cloudflare_email }} renew --days 45"
  environment:
    CF_DNS_API_TOKEN: "{{ CF_DNS_API_TOKEN }}"
    CF_ZONE_API_TOKEN: "{{ CF_ZONE_API_TOKEN }}"
  when: not request_cert.changed
  register: renew_cert

- name: Print the results of the renewal request
  debug:
    msg: "Requested renewal. Output was {{ renew_cert.stdout_lines }} {{ renew_cert.stderr_lines }}"
  when: renew_cert.changed

- name: Create a PFX-formatted certificate
  ansible.builtin.command: "openssl pkcs12 -inkey {{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.key -in {{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.crt -export -out {{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.pfx -password \"pass:{{ pfx_password }}\""
  # when: request_cert.changed or renew_cert.stdout | length > 0
  # TODO: make this when conditional also detect {{ ansible_user_info.home }}/.lego/certificates/_.{{ dns_domain }}.pfx not existing
